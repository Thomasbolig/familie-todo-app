'use client';

import { useState } from 'react';

export default function DashboardPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedCalendarDay, setSelectedCalendarDay] = useState(null);
  const [timePeriod, setTimePeriod] = useState('3dager');
  const [selectedPersonFilter, setSelectedPersonFilter] = useState('alle');
  const [showUserTasks, setShowUserTasks] = useState(false);
  const [familyMembers, setFamilyMembers] = useState([
    { id: 1, name: 'Emma', emoji: '👧', color: '#fef3c7', borderColor: '#f59e0b', role: 'barn' },
    { id: 2, name: 'Oliver', emoji: '👦', color: '#dbeafe', borderColor: '#3b82f6', role: 'barn' },
    { id: 3, name: 'Mor', emoji: '👩', color: '#f3e8ff', borderColor: '#8b5cf6', role: 'mor' },
    { id: 4, name: 'Far', emoji: '👨', color: '#e0f2fe', borderColor: '#0284c7', role: 'far' }
  ]);
  const [showAddMember, setShowAddMember] = useState(false);
  const [newMemberName, setNewMemberName] = useState('');
  const [newMemberRole, setNewMemberRole] = useState('');
  const [showFloatingMenu, setShowFloatingMenu] = useState(false);
  const [projects, setProjects] = useState([
    {
      id: 1,
      title: 'Selge huset',
      description: 'Forberede og gjennomføre salg av familiens hus',
      status: 'active',
      progress: 65,
      tasks: 12,
      completedTasks: 8,
      priority: 'high',
      assignedTo: ['Mor', 'Far'],
      dueDate: '2024-12-31',
      category: 'bolig'
    },
    {
      id: 2,
      title: 'Barnehage - Emma',
      description: 'Søknad og oppstart i ny barnehage for Emma',
      status: 'active',
      progress: 90,
      tasks: 5,
      completedTasks: 4,
      priority: 'medium',
      assignedTo: ['Mor'],
      dueDate: '2024-08-15',
      category: 'barn'
    },
    {
      id: 3,
      title: 'Sommerferie planlegging',
      description: 'Planlegge og bestille sommerferie for hele familien',
      status: 'completed',
      progress: 100,
      tasks: 6,
      completedTasks: 6,
      priority: 'low',
      assignedTo: ['Mor', 'Far'],
      dueDate: '2024-06-01',
      category: 'ferie'
    }
  ]);
  const [showAddProject, setShowAddProject] = useState(false);
  const [newProject, setNewProject] = useState({
    title: '',
    description: '',
    priority: 'medium',
    assignedTo: [],
    dueDate: '',
    category: 'annet'
  });
  const [selectedProject, setSelectedProject] = useState(null);
  const [showAddTask, setShowAddTask] = useState(false);
  const [standaloneTasks, setStandaloneTasks] = useState([
    {
      id: 1,
      title: 'Handle mat til middag',
      description: 'Kjøpe ingredienser til tacos',
      priority: 'medium',
      assignedTo: 'Mor',
      dueDate: '2024-11-25',
      completed: false,
      isRecurring: false,
      recurrence: null
    },
    {
      id: 2,
      title: 'Ringe fastlege',
      description: 'Bestille time for Emma',
      priority: 'high',
      assignedTo: 'Mor',
      dueDate: '2024-11-26',
      completed: false,
      isRecurring: false,
      recurrence: null
    },
    {
      id: 3,
      title: 'Løse kryss',
      description: 'Ukentlig kryss fra avisen',
      priority: 'low',
      assignedTo: 'Far',
      dueDate: '2024-11-24',
      completed: true,
      isRecurring: true,
      recurrence: 'weekly'
    }
  ]);
  const [showAddStandaloneTask, setShowAddStandaloneTask] = useState(false);
  const [newStandaloneTask, setNewStandaloneTask] = useState({
    title: '',
    description: '',
    priority: 'medium',
    assignedTo: '',
    dueDate: '',
    completed: false,
    isRecurring: false,
    recurrence: 'daily'
  });
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    priority: 'medium',
    assignedTo: '',
    dueDate: '',
    completed: false
  });
  const [projectTasks, setProjectTasks] = useState({
    1: [
      { id: 1, title: 'Ta bilder av huset', description: 'Profesjonelle bilder til salgsannonse', priority: 'high', assignedTo: 'Mor', dueDate: '2024-11-15', completed: true },
      { id: 2, title: 'Finn eiendomsmegler', description: 'Kontakt 3 forskjellige meglere for tilbud', priority: 'high', assignedTo: 'Far', dueDate: '2024-11-20', completed: true },
      { id: 3, title: 'Rydde og reparere', description: 'Fikse små skader og rydde for visning', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-12-01', completed: true },
      { id: 4, title: 'Sett prisantydning', description: 'Diskuter og bestem prisantydning med megler', priority: 'high', assignedTo: 'Far', dueDate: '2024-12-10', completed: true },
      { id: 5, title: 'Markedsføring', description: 'Publiser annonse på finn.no og sosiale medier', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-12-15', completed: true },
      { id: 6, title: 'Arrange visninger', description: 'Koordinere visninger med potensielle kjøpere', priority: 'medium', assignedTo: 'Far', dueDate: '2024-12-20', completed: true },
      { id: 7, title: 'Behandle bud', description: 'Vurdere og forhandle om innkomne bud', priority: 'high', assignedTo: 'Mor', dueDate: '2024-12-22', completed: true },
      { id: 8, title: 'Signere kontrakt', description: 'Gjennomgå og signere salgskontrakt', priority: 'high', assignedTo: 'Far', dueDate: '2024-12-25', completed: true },
      { id: 9, title: 'Forberede overtakelse', description: 'Klargjøre huset for overtakelse', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-12-28', completed: false },
      { id: 10, title: 'Flytte ut', description: 'Pakke og flytte alle eiendeler', priority: 'high', assignedTo: 'Familie', dueDate: '2024-12-30', completed: false },
      { id: 11, title: 'Sluttoppgjør', description: 'Gjennomføre sluttoppgjør med kjøper', priority: 'high', assignedTo: 'Far', dueDate: '2024-12-31', completed: false },
      { id: 12, title: 'Levere nøkler', description: 'Overlevere nøkler til ny eier', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-12-31', completed: false }
    ],
    2: [
      { id: 13, title: 'Søknad barnehageplass', description: 'Fylle ut og sende søknad til kommunen', priority: 'high', assignedTo: 'Mor', dueDate: '2024-08-01', completed: true },
      { id: 14, title: 'Barnehagebesøk', description: 'Besøke aktuelle barnehager med Emma', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-08-10', completed: true },
      { id: 15, title: 'Helseattest', description: 'Få helseattest fra fastlege for Emma', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-08-12', completed: true },
      { id: 16, title: 'Motta tilbud', description: 'Vente på og behandle barnehageplass-tilbud', priority: 'high', assignedTo: 'Mor', dueDate: '2024-08-15', completed: true },
      { id: 17, title: 'Innkjøp utstyr', description: 'Kjøpe sekk, sko og klær til barnehagen', priority: 'low', assignedTo: 'Mor', dueDate: '2024-08-20', completed: false }
    ],
    3: [
      { id: 18, title: 'Velge reisemål', description: 'Bestemme hvor familien skal på ferie', priority: 'medium', assignedTo: 'Familie', dueDate: '2024-03-01', completed: true },
      { id: 19, title: 'Bestille hotell', description: 'Reservere familierom på hotell', priority: 'high', assignedTo: 'Far', dueDate: '2024-03-15', completed: true },
      { id: 20, title: 'Kjøpe flybilletter', description: 'Bestille flybilletter for hele familien', priority: 'high', assignedTo: 'Mor', dueDate: '2024-04-01', completed: true },
      { id: 21, title: 'Pakke kofferter', description: 'Pakke klær og nødvendigheter for ferien', priority: 'medium', assignedTo: 'Familie', dueDate: '2024-06-01', completed: true },
      { id: 22, title: 'Arrangere pass for Emma', description: 'Søke om nytt pass til Emma', priority: 'medium', assignedTo: 'Mor', dueDate: '2024-05-01', completed: true },
      { id: 23, title: 'Planlegge aktiviteter', description: 'Research og planlegge aktiviteter på destinasjonen', priority: 'low', assignedTo: 'Far', dueDate: '2024-05-20', completed: true }
    ]
  });
  const [selectedMember, setSelectedMember] = useState(null);
  const [collapsedSections, setCollapsedSections] = useState({
    projects: true,
    tasks: true,
    calendar: true
  });

  // Calendar helper functions
  const formatMonth = (date) => {
    return date.toLocaleDateString('no-NO', { month: 'long', year: 'numeric' });
  };

  const isToday = (date) => {
    const today = new Date();
    return date.toDateString() === today.toDateString();
  };

  const getPersonForDate = (date) => {
    const dayOfMonth = date.getDate();
    const memberIndex = dayOfMonth % familyMembers.length;
    return familyMembers[memberIndex];
  };

  const addFamilyMember = () => {
    if (newMemberName.trim() && newMemberRole.trim()) {
      const colors = ['#fef3c7', '#dbeafe', '#f3e8ff', '#e0f2fe', '#f0fdf4', '#fef2f2'];
      const borderColors = ['#f59e0b', '#3b82f6', '#8b5cf6', '#0284c7', '#16a34a', '#dc2626'];

      // Role-based emoji assignment
      const roleEmojis = {
        mor: ['👩', '🤱', '👩‍💼', '👩‍🍳'],
        far: ['👨', '👨‍💼', '👨‍🍳', '👨‍🔧'],
        barn: ['👧', '👦', '🧒', '👶'],
        venn: ['👥', '👤', '🙋‍♀️', '🙋‍♂️']
      };

      const selectedEmojis = roleEmojis[newMemberRole] || ['👤'];

      const newMember = {
        id: Date.now(),
        name: newMemberName.trim(),
        role: newMemberRole,
        emoji: selectedEmojis[Math.floor(Math.random() * selectedEmojis.length)],
        color: colors[Math.floor(Math.random() * colors.length)],
        borderColor: borderColors[Math.floor(Math.random() * borderColors.length)]
      };

      setFamilyMembers(prev => [...prev, newMember]);
      setNewMemberName('');
      setNewMemberRole('');
      setShowAddMember(false);
    }
  };

  const getActivitiesForPeriod = () => {
    const today = new Date();
    const activities = [];

    if (timePeriod === '1dag') {
      return [
        { time: '08:00', title: 'Emma - Barnehage', person: 'Emma', type: 'barnehage' },
        { time: '17:00', title: 'Oliver - Fotball', person: 'Oliver', type: 'sport' },
        { time: '18:30', title: 'Familie middag', person: 'Familie', type: 'familie' }
      ];
    } else if (timePeriod === '3dager') {
      return [
        { time: 'I dag', title: 'Emma - Barnehage, Familie middag', person: 'Emma/Familie', type: 'mixed' },
        { time: 'I morgen', title: 'Oliver - Fotball, Møte med advokat', person: 'Oliver/Foreldre', type: 'mixed' },
        { time: 'Overmorgen', title: 'Familie tur til badet', person: 'Familie', type: 'familie' }
      ];
    } else { // 1uke
      return [
        { time: 'Man-Tir', title: 'Emma & Oliver - Skole/Barnehage', person: 'Barna', type: 'skole' },
        { time: 'Ons-Tor', title: 'Fotball, Svømming, Familie tid', person: 'Alle', type: 'mixed' },
        { time: 'Fre-Søn', title: 'Helg hos mor/far, Familie aktiviteter', person: 'Familie', type: 'familie' }
      ];
    }
  };

  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDay = firstDay.getDay();

    const days = [];

    // Add empty slots for days before the first day of the month
    for (let i = 0; i < startingDay; i++) {
      days.push(null);
    }

    // Add all days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(new Date(year, month, day));
    }

    return days;
  };

  const getTasksForMember = (memberName) => {
    // Get standalone tasks for member
    const standaloneTasksForMember = standaloneTasks.filter(task =>
      task.assignedTo === memberName
    );

    // Get project tasks for member
    const projectTasksForMember = [];
    Object.entries(projectTasks).forEach(([projectId, tasks]) => {
      const memberProjectTasks = tasks.filter(task => task.assignedTo === memberName);
      memberProjectTasks.forEach(task => {
        const project = projects.find(p => p.id.toString() === projectId);
        projectTasksForMember.push({
          ...task,
          projectName: project?.title || 'Ukjent prosjekt'
        });
      });
    });

    return {
      standalone: standaloneTasksForMember,
      project: projectTasksForMember,
      total: standaloneTasksForMember.length + projectTasksForMember.length
    };
  };

  // Helper function to get today's date in YYYY-MM-DD format
  const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  // Helper function to calculate tasks due today
  const getTodaysTasks = () => {
    const today = getTodayDate();

    // Get standalone tasks due today
    const standaloneTasksToday = standaloneTasks.filter(task =>
      task.dueDate === today && !task.completed
    );

    // Get project tasks due today
    const projectTasksToday = [];
    Object.entries(projectTasks).forEach(([projectId, tasks]) => {
      const todayProjectTasks = tasks.filter(task =>
        task.dueDate === today && !task.completed
      );
      projectTasksToday.push(...todayProjectTasks);
    });

    return standaloneTasksToday.length + projectTasksToday.length;
  };

  // Helper function to get tasks for current user (assuming "Mor" is logged in)
  const getCurrentUserTasks = () => {
    const currentUser = 'Mor'; // This would come from authentication in a real app
    return getTasksForMember(currentUser);
  };

  const toggleSection = (section) => {
    setCollapsedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  return (
    <div style={{ minHeight: '100vh', background: '#f9fafb' }}>
      {/* Mobile Header */}
      <header style={{ background: 'white', boxShadow: '0 1px 3px rgba(0,0,0,0.1)', borderBottom: '1px solid #e5e7eb', padding: '0.75rem 1rem' }} className="mobile-header">
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <h1 style={{ fontSize: '1.25rem', fontWeight: '600' }}>Familie TODO</h1>
          <button
            className="btn btn-secondary"
            onClick={() => setShowMobileMenu(!showMobileMenu)}
            style={{
              padding: '0.5rem',
              fontSize: '1.2rem',
              background: 'none',
              border: '1px solid #d1d5db',
              borderRadius: '0.5rem'
            }}
          >
            ☰
          </button>
        </div>
      </header>

      {/* Desktop Layout */}
      <div style={{ display: 'flex' }}>
        {/* Sidebar */}
        <aside data-mobile-menu="true" style={{
          position: 'fixed',
          top: 0,
          left: showMobileMenu ? 0 : '-256px',
          width: '256px',
          height: '100vh',
          background: 'white',
          borderRight: '1px solid #e5e7eb',
          padding: '1rem',
          transition: 'left 0.3s ease',
          zIndex: 1000
        }}>
          <div style={{ marginBottom: '2rem' }}>
            <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>Familie TODO</h1>
            <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>Organiser familielivet</p>
          </div>

          <nav>
            <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
              {[
                { id: 'overview', label: '📊 Oversikt' },
                { id: 'tasks', label: '✅ Oppgaver' },
                { id: 'projects', label: '📁 Prosjekter' },
                { id: 'calendar', label: '📅 Kalender' },
                { id: 'family', label: '👨‍👩‍👧‍👦 Familie' }
              ].map(item => (
                <li key={item.id} style={{ marginBottom: '0.5rem' }}>
                  <button
                    onClick={() => {
                      setActiveTab(item.id);
                      setShowMobileMenu(false);
                    }}
                    style={{
                      width: '100%',
                      padding: '0.75rem 1rem',
                      textAlign: 'left',
                      border: 'none',
                      borderRadius: '0.5rem',
                      background: activeTab === item.id ? '#3b82f6' : 'transparent',
                      color: activeTab === item.id ? 'white' : '#374151',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                  >
                    {item.label}
                  </button>
                </li>
              ))}
            </ul>
          </nav>
        </aside>

        {/* Overlay for mobile menu */}
        {showMobileMenu && (
          <div
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: 'rgba(0, 0, 0, 0.5)',
              zIndex: 999
            }}
            onClick={() => setShowMobileMenu(false)}
          />
        )}

        {/* Main Content */}
        <main style={{ flex: 1, padding: '0.75rem' }}>
          {activeTab === 'overview' && (
            <div>
              <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
                📊 Oversikt
              </h1>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3" style={{ marginBottom: '1rem' }}>
                <div
                  className="card"
                  style={{
                    padding: '0.75rem',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease-in-out'
                  }}
                  onClick={() => {
                    setActiveTab('projects');
                    setShowUserTasks(false);
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
                  }}
                >
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Aktive Prosjekter
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                    {projects.filter(p => p.status === 'active').length}
                  </p>
                </div>
                <div
                  className="card"
                  style={{
                    padding: '0.75rem',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease-in-out'
                  }}
                  onClick={() => {
                    setActiveTab('tasks');
                    setShowUserTasks(false);
                    setSelectedPersonFilter('alle');
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
                  }}
                >
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Oppgaver i dag
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#f59e0b' }}>
                    {getTodaysTasks()}
                  </p>
                </div>
                <div
                  className="card"
                  style={{
                    padding: '0.75rem',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease-in-out'
                  }}
                  onClick={() => {
                    setActiveTab('tasks');
                    setShowUserTasks(true);
                    setSelectedPersonFilter('Mor'); // Set filter to current user
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
                  }}
                >
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Mine oppgaver
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#16a34a' }}>
                    {getCurrentUserTasks().total}
                  </p>
                </div>
              </div>

              {/* Time Period Filters */}
              <div style={{ marginBottom: '1rem' }}>
                <div style={{ display: 'flex', gap: '0.375rem', flexWrap: 'wrap' }}>
                  {[
                    { id: '1dag', label: '1 dag' },
                    { id: '3dager', label: '3 dager' },
                    { id: '1uke', label: '1 uke' }
                  ].map(period => (
                    <button
                      key={period.id}
                      className={`btn ${timePeriod === period.id ? 'btn-primary' : 'btn-secondary'}`}
                      style={{ padding: '0.375rem 0.75rem', fontSize: '0.8rem' }}
                      onClick={() => setTimePeriod(period.id)}
                    >
                      {period.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Weather Widget */}
              <div style={{ marginBottom: '1rem', padding: '0.75rem', background: '#f8fafc', borderRadius: '0.5rem', border: '1px solid #e2e8f0' }}>
                <h2 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                  ☀️ Været
                </h2>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.75rem' }}>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.125rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.125rem' }}>I dag</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.125rem' }}>☀️</div>
                    <div style={{ fontSize: '0.75rem', color: '#4b5563', fontWeight: '500' }}>18°</div>
                  </div>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.125rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.125rem' }}>I morgen</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.125rem' }}>⛅</div>
                    <div style={{ fontSize: '0.75rem', color: '#4b5563', fontWeight: '500' }}>16°</div>
                  </div>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.125rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.125rem' }}>Overmorgen</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.125rem' }}>🌧️</div>
                    <div style={{ fontSize: '0.75rem', color: '#4b5563', fontWeight: '500' }}>14°</div>
                  </div>
                </div>

                {/* Activities based on time period */}
                <div style={{ borderTop: '1px solid #e2e8f0', paddingTop: '0.5rem' }}>
                  <h3 style={{ fontSize: '0.875rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                    📅 Aktiviteter ({timePeriod === '1dag' ? '1 dag' : timePeriod === '3dager' ? '3 dager' : '1 uke'})
                  </h3>
                  <div style={{ display: 'grid', gap: '0.25rem' }}>
                    {getActivitiesForPeriod().map((activity, index) => (
                      <div
                        key={index}
                        style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                          padding: '0.375rem 0.5rem',
                          background: 'white',
                          borderRadius: '0.25rem',
                          fontSize: '0.75rem',
                          border: '1px solid #e5e7eb'
                        }}
                      >
                        <div style={{ fontWeight: '500', color: '#374151' }}>
                          {activity.time}
                        </div>
                        <div style={{
                          flex: 1,
                          paddingLeft: '0.5rem',
                          color: '#6b7280',
                          fontSize: '0.7rem',
                          textAlign: 'right'
                        }}>
                          {activity.title}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Person Filter */}
              <div style={{ marginBottom: '1rem' }}>
                <h2 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                  Vis for:
                </h2>
                <div style={{ display: 'flex', gap: '0.375rem', flexWrap: 'wrap' }}>
                  <button
                    className={`btn ${selectedPersonFilter === 'alle' ? 'btn-primary' : 'btn-secondary'}`}
                    style={{ padding: '0.375rem 0.75rem', fontSize: '0.8rem' }}
                    onClick={() => setSelectedPersonFilter('alle')}
                  >
                    👨‍👩‍👧‍👦 Alle
                  </button>
                  {familyMembers.map(member => (
                    <button
                      key={member.id}
                      className={`btn ${selectedPersonFilter === member.name.toLowerCase() ? 'btn-primary' : 'btn-secondary'}`}
                      style={{ padding: '0.375rem 0.75rem', fontSize: '0.8rem' }}
                      onClick={() => setSelectedPersonFilter(member.name.toLowerCase())}
                    >
                      {member.emoji} {member.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* Calendar Section */}
              <div style={{ marginBottom: '1rem' }}>
                <div
                  className="section-header"
                  onClick={() => toggleSection('calendar')}
                  style={{ cursor: 'pointer', padding: '0.75rem', borderRadius: '0.5rem', marginBottom: '0.5rem' }}
                >
                  <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                    📅 Kalender
                  </h2>
                  <button
                    className={`section-toggle ${!collapsedSections.calendar ? 'expanded' : ''}`}
                    style={{
                      background: 'none',
                      border: 'none',
                      fontSize: '1.25rem',
                      cursor: 'pointer',
                      color: '#6b7280',
                      transform: !collapsedSections.calendar ? 'rotate(90deg)' : 'rotate(0deg)',
                      transition: 'transform 0.2s'
                    }}
                  >
                    ▶
                  </button>
                </div>
                <div
                  className={`section-content ${collapsedSections.calendar ? 'collapsed' : ''}`}
                  style={{
                    overflow: 'hidden',
                    maxHeight: collapsedSections.calendar ? '0' : '1000px',
                    opacity: collapsedSections.calendar ? 0 : 1,
                    transition: 'max-height 0.3s ease-out, opacity 0.3s ease-out'
                  }}
                >

                <div className="card" style={{ padding: '0.75rem' }}>
                  {/* Calendar Header */}
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    marginBottom: '1rem'
                  }}>
                    <button
                      style={{
                        background: 'none',
                        border: 'none',
                        fontSize: '1.25rem',
                        cursor: 'pointer',
                        padding: '0.25rem',
                        color: '#6b7280'
                      }}
                      onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1))}
                    >
                      ‹
                    </button>
                    <h3 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                      {formatMonth(currentDate)}
                    </h3>
                    <button
                      style={{
                        background: 'none',
                        border: 'none',
                        fontSize: '1.25rem',
                        cursor: 'pointer',
                        padding: '0.25rem',
                        color: '#6b7280'
                      }}
                      onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1))}
                    >
                      ›
                    </button>
                  </div>

                  {/* Day Headers */}
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(7, 1fr)',
                    gap: '2px',
                    marginBottom: '0.5rem'
                  }}>
                    {['Søn', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør'].map(day => (
                      <div key={day} style={{
                        fontWeight: '600',
                        color: '#6b7280',
                        padding: '0.5rem 0',
                        textAlign: 'center',
                        fontSize: '0.75rem'
                      }}>
                        {day}
                      </div>
                    ))}
                  </div>

                  {/* Calendar Days */}
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(7, 1fr)',
                    gap: '2px'
                  }}>
                    {getDaysInMonth(currentDate).map((date, index) => {
                      if (!date) {
                        return <div key={index} style={{ aspectRatio: '1', minHeight: '32px' }} />;
                      }

                      const personForDate = getPersonForDate(date);
                      const today = isToday(date);
                      const hasActivities = (date.getDate() % 3) === 0; // Deterministic activities for demo

                      return (
                        <div
                          key={index}
                          className={`calendar-day ${today ? 'today' : ''}`}
                          style={{
                            aspectRatio: '1',
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: '0.75rem',
                            borderRadius: '0.25rem',
                            cursor: 'pointer',
                            position: 'relative',
                            minHeight: '32px',
                            padding: '2px',
                            background: today ? '#3b82f6' : personForDate.color,
                            color: today ? 'white' : '#374151',
                            border: `1px solid ${today ? '#2563eb' : personForDate.borderColor}`
                          }}
                          onClick={() => {
                            const dateFormatted = date.toLocaleDateString('no-NO', {
                              weekday: 'long',
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            });
                            const custodyInfo = `Aktiviteter for ${personForDate.name} ${personForDate.emoji}`;
                            const activities = hasActivities ? [
                              { name: 'Emma - Barnehage', time: '08:00-16:00', type: 'barnehage' },
                              { name: 'Oliver - Fotballtrening', time: '17:00-18:30', type: 'sport' },
                              { name: 'Familie middag', time: '18:30-20:00', type: 'familie' }
                            ] : [];

                            setSelectedCalendarDay({
                              date: dateFormatted,
                              custodyInfo,
                              activities,
                              hasActivities,
                              person: personForDate
                            });
                          }}
                        >
                          <span style={{ fontWeight: today ? '600' : '500' }}>
                            {date.getDate()}
                          </span>
                          {hasActivities && (
                            <div style={{
                              width: '4px',
                              height: '4px',
                              borderRadius: '50%',
                              marginTop: '2px',
                              background: today ? 'rgba(255,255,255,0.8)' : personForDate.borderColor
                            }} />
                          )}
                        </div>
                      );
                    })}
                  </div>

                  {/* Legend */}
                  <div style={{
                    marginTop: '1rem',
                    display: 'flex',
                    justifyContent: 'center',
                    gap: '0.5rem',
                    fontSize: '0.75rem',
                    flexWrap: 'wrap'
                  }}>
                    {familyMembers.map(member => (
                      <div key={member.id} style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>
                        <div style={{
                          width: '12px',
                          height: '12px',
                          background: member.color,
                          borderRadius: '2px',
                          border: `1px solid ${member.borderColor}`
                        }} />
                        <span>{member.emoji} {member.name}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Selected Calendar Day Expanded Content */}
              {selectedCalendarDay && (
                <div style={{
                  background: 'white',
                  borderRadius: '0.75rem',
                  padding: '1.5rem',
                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                  border: '1px solid #e5e7eb',
                  marginBottom: '1.5rem'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '1rem' }}>
                    <div>
                      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '0.5rem' }}>
                        📅 {selectedCalendarDay.date}
                      </h3>
                      <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>
                        👥 {selectedCalendarDay.custodyInfo}
                      </p>
                    </div>
                    <button
                      onClick={() => setSelectedCalendarDay(null)}
                      style={{
                        background: 'none',
                        border: 'none',
                        fontSize: '1.5rem',
                        cursor: 'pointer',
                        color: '#6b7280',
                        padding: '0.25rem'
                      }}
                    >
                      ×
                    </button>
                  </div>

                  {selectedCalendarDay.hasActivities ? (
                    <div>
                      <h4 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.75rem' }}>Aktiviteter:</h4>
                      <div style={{ display: 'grid', gap: '0.75rem' }}>
                        {selectedCalendarDay.activities.map((activity, index) => (
                          <div
                            key={index}
                            style={{
                              padding: '0.75rem',
                              background: '#f8fafc',
                              borderRadius: '0.5rem',
                              border: '1px solid #e2e8f0',
                              cursor: 'pointer',
                              transition: 'all 0.2s'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#f1f5f9';
                              e.currentTarget.style.borderColor = '#cbd5e1';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = '#f8fafc';
                              e.currentTarget.style.borderColor = '#e2e8f0';
                            }}
                            onClick={() => alert(`Klikket på aktivitet: ${activity.name} (${activity.time})`)}
                          >
                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              <span style={{ fontWeight: '500' }}>{activity.name}</span>
                              <span style={{ color: '#6b7280', fontSize: '0.875rem' }}>{activity.time}</span>
                            </div>
                            <div style={{ marginTop: '0.25rem' }}>
                              <span style={{
                                fontSize: '0.75rem',
                                padding: '0.25rem 0.5rem',
                                borderRadius: '0.25rem',
                                background: activity.type === 'barnehage' ? '#fef3c7' : activity.type === 'sport' ? '#dbeafe' : '#f3e8ff',
                                color: activity.type === 'barnehage' ? '#92400e' : activity.type === 'sport' ? '#1e40af' : '#6b21a8'
                              }}>
                                {activity.type === 'barnehage' ? '🏫 Barnehage' : activity.type === 'sport' ? '⚽ Sport' : '👨‍👩‍👧‍👦 Familie'}
                              </span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <div style={{ textAlign: 'center', color: '#6b7280', padding: '1rem' }}>
                      <p>Ingen spesielle aktiviteter denne dagen.</p>
                      <p style={{ fontSize: '0.875rem', marginTop: '0.5rem' }}>💡 Klikk på familiefiltrene for å se spesifikke aktiviteter!</p>
                    </div>
                  )}
                </div>
              )}
              </div>

              {/* Tasks Section */}
              <div style={{ marginBottom: '1rem' }}>
                <div
                  className="section-header"
                  onClick={() => toggleSection('tasks')}
                  style={{ cursor: 'pointer', padding: '0.75rem', borderRadius: '0.5rem', marginBottom: '0.5rem' }}
                >
                  <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                    ✅ Oppgaver
                  </h2>
                  <button
                    className={`section-toggle ${!collapsedSections.tasks ? 'expanded' : ''}`}
                    style={{
                      background: 'none',
                      border: 'none',
                      fontSize: '1.25rem',
                      cursor: 'pointer',
                      color: '#6b7280',
                      transform: !collapsedSections.tasks ? 'rotate(90deg)' : 'rotate(0deg)',
                      transition: 'transform 0.2s'
                    }}
                  >
                    ▶
                  </button>
                </div>
                <div
                  className={`section-content ${collapsedSections.tasks ? 'collapsed' : ''}`}
                  style={{
                    overflow: 'hidden',
                    maxHeight: collapsedSections.tasks ? '0' : '1000px',
                    opacity: collapsedSections.tasks ? 0 : 1,
                    transition: 'max-height 0.3s ease-out, opacity 0.3s ease-out'
                  }}
                >
                  <div style={{ display: 'grid', gap: '0.5rem' }}>
                    {standaloneTasks.slice(0, 3).map(task => (
                      <div
                        key={task.id}
                        className="card"
                        style={{
                          padding: '0.75rem',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          transform: 'translateY(0px)',
                          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                          opacity: task.completed ? 0.7 : 1,
                          background: task.completed ? '#f8fafc' : 'white'
                        }}
                        onClick={() => {
                          setStandaloneTasks(standaloneTasks.map(t =>
                            t.id === task.id ? { ...t, completed: !t.completed } : t
                          ));
                        }}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.transform = 'translateY(-2px)';
                          e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'translateY(0px)';
                          e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
                        }}
                      >
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                          <span style={{
                            width: '8px',
                            height: '8px',
                            borderRadius: '50%',
                            backgroundColor: task.completed ? '#16a34a' :
                              task.priority === 'high' ? '#dc2626' : task.priority === 'medium' ? '#d97706' : '#16a34a'
                          }}></span>
                          <h3 style={{
                            fontSize: '1rem',
                            fontWeight: '600',
                            margin: 0,
                            flex: 1,
                            textDecoration: task.completed ? 'line-through' : 'none',
                            color: task.completed ? '#6b7280' : '#111827'
                          }}>
                            {task.completed ? '✅' : '📋'} {task.title}
                          </h3>
                          <span style={{ fontSize: '0.75rem', color: '#6b7280' }}>{task.assignedTo}</span>
                        </div>
                        {task.description && (
                          <p style={{
                            fontSize: '0.8rem',
                            color: '#6b7280',
                            margin: '0.25rem 0 0 1rem',
                            textDecoration: task.completed ? 'line-through' : 'none'
                          }}>
                            {task.description}
                          </p>
                        )}
                      </div>
                    ))}
                    {standaloneTasks.length > 3 && (
                      <div className="card" style={{ padding: '0.75rem', textAlign: 'center', color: '#6b7280' }}>
                        <p style={{ margin: 0, fontSize: '0.875rem' }}>
                          +{standaloneTasks.length - 3} flere oppgaver...
                        </p>
                      </div>
                    )}
                    {standaloneTasks.length === 0 && (
                      <div className="card" style={{ padding: '1rem', textAlign: 'center', color: '#6b7280' }}>
                        <p style={{ margin: 0 }}>Ingen oppgaver ennå</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Projects Section */}
              <div>
                <div
                  className="section-header"
                  onClick={() => toggleSection('projects')}
                  style={{ cursor: 'pointer', padding: '0.75rem', borderRadius: '0.5rem', marginBottom: '0.5rem' }}
                >
                  <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                    📁 Prosjekter
                  </h2>
                  <button
                    className={`section-toggle ${!collapsedSections.projects ? 'expanded' : ''}`}
                    style={{
                      background: 'none',
                      border: 'none',
                      fontSize: '1.25rem',
                      cursor: 'pointer',
                      color: '#6b7280',
                      transform: !collapsedSections.projects ? 'rotate(90deg)' : 'rotate(0deg)',
                      transition: 'transform 0.2s'
                    }}
                  >
                    ▶
                  </button>
                </div>
                <div
                  className={`section-content ${collapsedSections.projects ? 'collapsed' : ''}`}
                  style={{
                    overflow: 'hidden',
                    maxHeight: collapsedSections.projects ? '0' : '1000px',
                    opacity: collapsedSections.projects ? 0 : 1,
                    transition: 'max-height 0.3s ease-out, opacity 0.3s ease-out'
                  }}
                >
                  <div style={{ display: 'grid', gap: '0.5rem' }}>
                    {projects.filter(p => p.status === 'active').map(project => (
                      <div
                        key={project.id}
                        className="card"
                        style={{
                          padding: '0.75rem',
                          cursor: 'pointer',
                          transition: 'all 0.2s ease',
                          transform: 'translateY(0px)',
                          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                        }}
                        onClick={() => setSelectedProject(project)}
                        onMouseEnter={(e) => {
                          e.currentTarget.style.transform = 'translateY(-2px)';
                          e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
                        }}
                        onMouseLeave={(e) => {
                          e.currentTarget.style.transform = 'translateY(0px)';
                          e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
                        }}
                      >
                        <h3 style={{ fontSize: '1rem', fontWeight: '600' }}>{project.title}</h3>
                        <p style={{ fontSize: '0.8rem', color: '#6b7280' }}>
                          {project.completedTasks}/{project.tasks} oppgaver - {project.progress}% fullført
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

            </div>
          )}

          {activeTab === 'tasks' && (
            <div>
              <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
                ✅ Oppgaver
              </h1>

              {/* Task Stats */}
              <div className="grid grid-cols-2 gap-3" style={{ marginBottom: '1rem' }}>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Aktive oppgaver
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                    {standaloneTasks.filter(t => !t.completed).length}
                  </p>
                </div>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Fullførte oppgaver
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#16a34a' }}>
                    {standaloneTasks.filter(t => t.completed).length}
                  </p>
                </div>
              </div>

              {/* Add Task Button */}
              <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                  Alle oppgaver ({standaloneTasks.length})
                </h2>
                <button
                  className="btn btn-primary"
                  style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                  onClick={() => setShowAddStandaloneTask(true)}
                >
                  + Ny oppgave
                </button>
              </div>

              {/* Task List */}
              <div style={{ display: 'grid', gap: '0.75rem' }}>
                {standaloneTasks.map(task => (
                  <div key={task.id} className="card" style={{
                    padding: '1rem',
                    opacity: task.completed ? 0.7 : 1,
                    background: task.completed ? '#f8fafc' : 'white'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>
                      <input
                        type="checkbox"
                        checked={task.completed}
                        onChange={() => {
                          setStandaloneTasks(standaloneTasks.map(t =>
                            t.id === task.id ? { ...t, completed: !t.completed } : t
                          ));
                        }}
                        style={{
                          width: '1.2rem',
                          height: '1.2rem',
                          marginTop: '0.1rem',
                          cursor: 'pointer'
                        }}
                      />
                      <div style={{ flex: 1 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.25rem' }}>
                          <h3 style={{
                            fontSize: '1rem',
                            fontWeight: '600',
                            margin: 0,
                            textDecoration: task.completed ? 'line-through' : 'none'
                          }}>
                            {task.title}
                          </h3>
                          <span style={{
                            fontSize: '0.75rem',
                            padding: '0.125rem 0.5rem',
                            borderRadius: '0.25rem',
                            background: task.priority === 'high' ? '#fef2f2' : task.priority === 'medium' ? '#fffbeb' : '#f0fdf4',
                            color: task.priority === 'high' ? '#dc2626' : task.priority === 'medium' ? '#d97706' : '#16a34a',
                            border: `1px solid ${task.priority === 'high' ? '#fecaca' : task.priority === 'medium' ? '#fed7aa' : '#bbf7d0'}`
                          }}>
                            {task.priority === 'high' ? 'Høy' : task.priority === 'medium' ? 'Medium' : 'Lav'}
                          </span>
                          {task.isRecurring && (
                            <span style={{
                              fontSize: '0.75rem',
                              padding: '0.125rem 0.5rem',
                              borderRadius: '0.25rem',
                              background: '#e0f2fe',
                              color: '#0284c7',
                              border: '1px solid #7dd3fc'
                            }}>
                              🔄 {task.recurrence === 'daily' ? 'Daglig' : task.recurrence === 'weekly' ? 'Ukentlig' : 'Månedlig'}
                            </span>
                          )}
                        </div>
                        {task.description && (
                          <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: '0 0 0.5rem 0' }}>
                            {task.description}
                          </p>
                        )}
                        <div style={{ display: 'flex', gap: '1rem', fontSize: '0.8rem', color: '#6b7280' }}>
                          <span>📅 {task.dueDate}</span>
                          <span>👤 {task.assignedTo}</span>
                        </div>
                      </div>
                      <button
                        className="btn btn-secondary"
                        style={{
                          padding: '0.375rem 0.75rem',
                          fontSize: '0.8rem',
                          background: '#fef2f2',
                          borderColor: '#fecaca',
                          color: '#dc2626'
                        }}
                        onClick={() => {
                          if (confirm(`Er du sikker på at du vil slette oppgaven "${task.title}"?`)) {
                            setStandaloneTasks(standaloneTasks.filter(t => t.id !== task.id));
                          }
                        }}
                      >
                        🗑️ Slett
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {standaloneTasks.length === 0 && (
                <div className="card" style={{ padding: '2rem', textAlign: 'center', color: '#6b7280' }}>
                  <p>Ingen oppgaver ennå. Klikk på "Ny oppgave" for å legge til den første oppgaven.</p>
                </div>
              )}

              {/* Quick Actions */}
              <div style={{ marginTop: '1.5rem' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.75rem' }}>
                  Hurtighandlinger
                </h2>
                <div style={{ display: 'grid', gap: '0.5rem' }}>
                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => setActiveTab('projects')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>📁</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Se prosjekter
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Vis oppgaver knyttet til prosjekter
                        </p>
                      </div>
                    </div>
                  </button>

                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => setActiveTab('overview')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>📊</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Se oversikt
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Gå tilbake til hovedoversikten
                        </p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>

              {/* Add Standalone Task Modal */}
              {showAddStandaloneTask && (
                <div style={{
                  position: 'fixed',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  background: 'rgba(0, 0, 0, 0.5)',
                  zIndex: 1010,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  padding: '1rem'
                }}>
                  <div style={{
                    background: 'white',
                    borderRadius: '0.75rem',
                    padding: '1.5rem',
                    width: '100%',
                    maxWidth: '400px',
                    boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'
                  }}>
                    <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '1rem' }}>
                      Legg til ny oppgave
                    </h3>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Tittel:</label>
                      <input
                        className="form-input"
                        type="text"
                        value={newStandaloneTask.title}
                        onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, title: e.target.value })}
                        placeholder="Oppgavetittel..."
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Beskrivelse:</label>
                      <textarea
                        className="form-input"
                        value={newStandaloneTask.description}
                        onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, description: e.target.value })}
                        placeholder="Beskrivelse av oppgaven..."
                        rows={3}
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Prioritet:</label>
                      <select
                        className="form-input"
                        value={newStandaloneTask.priority}
                        onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, priority: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      >
                        <option value="low">Lav</option>
                        <option value="medium">Medium</option>
                        <option value="high">Høy</option>
                      </select>
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Tildelt til:</label>
                      <select
                        className="form-input"
                        value={newStandaloneTask.assignedTo}
                        onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, assignedTo: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      >
                        <option value="">Velg person...</option>
                        {familyMembers.map(member => (
                          <option key={member.id} value={member.name}>
                            {member.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Forfallsdato:</label>
                      <input
                        className="form-input"
                        type="date"
                        value={newStandaloneTask.dueDate}
                        onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, dueDate: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}>
                        <input
                          type="checkbox"
                          checked={newStandaloneTask.isRecurring}
                          onChange={(e) => setNewStandaloneTask({
                            ...newStandaloneTask,
                            isRecurring: e.target.checked,
                            recurrence: e.target.checked ? 'daily' : null
                          })}
                        />
                        <span className="form-label" style={{ margin: 0 }}>Gjentagende oppgave</span>
                      </label>
                    </div>

                    {newStandaloneTask.isRecurring && (
                      <div style={{ marginBottom: '1rem' }}>
                        <label className="form-label">Hvor ofte:</label>
                        <select
                          className="form-input"
                          value={newStandaloneTask.recurrence || 'daily'}
                          onChange={(e) => setNewStandaloneTask({ ...newStandaloneTask, recurrence: e.target.value })}
                          style={{ marginBottom: '0.5rem' }}
                        >
                          <option value="daily">Daglig</option>
                          <option value="weekly">Ukentlig</option>
                          <option value="monthly">Månedlig</option>
                        </select>
                      </div>
                    )}

                    <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'flex-end' }}>
                      <button
                        className="btn btn-secondary"
                        onClick={() => {
                          setShowAddStandaloneTask(false);
                          setNewStandaloneTask({
                            title: '',
                            description: '',
                            priority: 'medium',
                            assignedTo: '',
                            dueDate: '',
                            completed: false,
                            isRecurring: false,
                            recurrence: null
                          });
                        }}
                      >
                        Avbryt
                      </button>
                      <button
                        className="btn btn-primary"
                        onClick={() => {
                          if (!newStandaloneTask.title.trim()) return;

                          const task = {
                            id: Date.now() + Math.random(),
                            ...newStandaloneTask,
                            completed: false
                          };

                          setStandaloneTasks(prev => [...prev, task]);

                          // Reset form and close modal
                          setShowAddStandaloneTask(false);
                          setNewStandaloneTask({
                            title: '',
                            description: '',
                            priority: 'medium',
                            assignedTo: '',
                            dueDate: '',
                            completed: false,
                            isRecurring: false,
                            recurrence: null
                          });
                        }}
                        disabled={!newStandaloneTask.title.trim()}
                      >
                        Legg til oppgave
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'projects' && !selectedProject && (
            <div>
              <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
                📁 Prosjekter
              </h1>

              {/* Project Stats */}
              <div className="grid grid-cols-2 gap-3" style={{ marginBottom: '1rem' }}>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Aktive prosjekter
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                    {projects.filter(p => p.status === 'active').length}
                  </p>
                </div>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Fullførte prosjekter
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#16a34a' }}>
                    {projects.filter(p => p.status === 'completed').length}
                  </p>
                </div>
              </div>

              {/* Add Project Button */}
              <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                  Alle prosjekter ({projects.length})
                </h2>
                <button
                  className="btn btn-primary"
                  style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                  onClick={() => setShowAddProject(true)}
                >
                  + Nytt prosjekt
                </button>
              </div>

              {/* Project List */}
              <div style={{ display: 'grid', gap: '0.75rem' }}>
                {projects.map(project => (
                  <div
                    key={project.id}
                    className="card"
                    style={{
                      padding: '1rem',
                      cursor: 'pointer',
                      transition: 'all 0.2s ease',
                    }}
                    onClick={() => setSelectedProject(project)}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
                    }}
                  >
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '0.75rem' }}>
                      <div style={{ flex: 1 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.25rem' }}>
                          <h3 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                            {project.title}
                          </h3>
                          <span style={{
                            fontSize: '0.75rem',
                            padding: '0.125rem 0.5rem',
                            borderRadius: '0.25rem',
                            background: project.priority === 'high' ? '#fef2f2' : project.priority === 'medium' ? '#fffbeb' : '#f0fdf4',
                            color: project.priority === 'high' ? '#dc2626' : project.priority === 'medium' ? '#d97706' : '#16a34a',
                            border: `1px solid ${project.priority === 'high' ? '#fecaca' : project.priority === 'medium' ? '#fed7aa' : '#bbf7d0'}`
                          }}>
                            {project.priority === 'high' ? 'Høy' : project.priority === 'medium' ? 'Medium' : 'Lav'}
                          </span>
                        </div>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: '0 0 0.5rem 0' }}>
                          {project.description}
                        </p>
                        <div style={{ display: 'flex', gap: '1rem', fontSize: '0.8rem', color: '#6b7280' }}>
                          <span>📅 {project.dueDate}</span>
                          <span>👥 {project.assignedTo.join(', ')}</span>
                          <span>📂 {project.category}</span>
                        </div>
                      </div>
                      <div style={{ display: 'flex', gap: '0.5rem', marginLeft: '1rem' }}>
                        <button
                          className="btn btn-secondary"
                          style={{ padding: '0.375rem 0.75rem', fontSize: '0.8rem' }}
                          onClick={(e) => {
                            e.stopPropagation();
                            setSelectedProject(project);
                          }}
                        >
                          👁️ Se detaljer
                        </button>
                        <button
                          className="btn btn-secondary"
                          style={{
                            padding: '0.375rem 0.75rem',
                            fontSize: '0.8rem',
                            background: project.status === 'completed' ? '#f0fdf4' : '#fef2f2',
                            borderColor: project.status === 'completed' ? '#bbf7d0' : '#fecaca',
                            color: project.status === 'completed' ? '#16a34a' : '#dc2626'
                          }}
                          onClick={(e) => {
                            e.stopPropagation();
                            const newStatus = project.status === 'active' ? 'completed' : 'active';
                            const newProgress = newStatus === 'completed' ? 100 : project.progress;
                            const newCompletedTasks = newStatus === 'completed' ? project.tasks : project.completedTasks;

                            setProjects(projects.map(p =>
                              p.id === project.id
                                ? { ...p, status: newStatus, progress: newProgress, completedTasks: newCompletedTasks }
                                : p
                            ));
                          }}
                        >
                          {project.status === 'completed' ? '🔄 Reaktiver' : '✅ Fullfør'}
                        </button>
                      </div>
                    </div>

                    {/* Progress Bar */}
                    <div style={{ marginBottom: '0.5rem' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.25rem' }}>
                        <span style={{ fontSize: '0.8rem', fontWeight: '500' }}>Fremdrift</span>
                        <span style={{ fontSize: '0.8rem', color: '#6b7280' }}>
                          {project.completedTasks}/{project.tasks} oppgaver ({project.progress}%)
                        </span>
                      </div>
                      <div style={{
                        width: '100%',
                        height: '8px',
                        background: '#f3f4f6',
                        borderRadius: '4px',
                        overflow: 'hidden'
                      }}>
                        <div style={{
                          width: `${project.progress}%`,
                          height: '100%',
                          background: project.status === 'completed' ? '#16a34a' : '#3b82f6',
                          transition: 'width 0.3s ease'
                        }} />
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Quick Actions */}
              <div style={{ marginTop: '1.5rem' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.75rem' }}>
                  Hurtighandlinger
                </h2>
                <div style={{ display: 'grid', gap: '0.5rem' }}>
                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => alert('Prosjektmaler kommer snart!')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>📋</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Bruk prosjektmal
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Start med forhåndsdefinerte maler for vanlige prosjekter
                        </p>
                      </div>
                    </div>
                  </button>

                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => setActiveTab('overview')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>📊</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Se prosjektoversikt
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Gå tilbake til hovedoversikten
                        </p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Project Detail View */}
          {activeTab === 'projects' && selectedProject && (
            <div>
              {/* Header with back button */}
              <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1rem' }}>
                <button
                  className="btn btn-secondary"
                  style={{ padding: '0.5rem', fontSize: '1.2rem' }}
                  onClick={() => setSelectedProject(null)}
                >
                  ←
                </button>
                <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', margin: 0 }}>
                  {selectedProject.title}
                </h1>
              </div>

              {/* Project Info */}
              <div className="card" style={{ padding: '1rem', marginBottom: '1rem' }}>
                <p style={{ fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.75rem' }}>
                  {selectedProject.description}
                </p>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '1rem', fontSize: '0.875rem' }}>
                  <div>
                    <span style={{ color: '#6b7280' }}>Status: </span>
                    <span style={{
                      color: selectedProject.status === 'completed' ? '#16a34a' : '#3b82f6',
                      fontWeight: '500'
                    }}>
                      {selectedProject.status === 'completed' ? 'Fullført' : 'Aktiv'}
                    </span>
                  </div>
                  <div>
                    <span style={{ color: '#6b7280' }}>Prioritet: </span>
                    <span style={{
                      color: selectedProject.priority === 'high' ? '#dc2626' : selectedProject.priority === 'medium' ? '#d97706' : '#16a34a',
                      fontWeight: '500'
                    }}>
                      {selectedProject.priority === 'high' ? 'Høy' : selectedProject.priority === 'medium' ? 'Medium' : 'Lav'}
                    </span>
                  </div>
                  <div>
                    <span style={{ color: '#6b7280' }}>Frist: </span>
                    <span style={{ fontWeight: '500' }}>{selectedProject.dueDate}</span>
                  </div>
                  <div>
                    <span style={{ color: '#6b7280' }}>Ansvarlige: </span>
                    <span style={{ fontWeight: '500' }}>{selectedProject.assignedTo.join(', ')}</span>
                  </div>
                </div>
              </div>

              {/* Progress Overview */}
              <div className="grid grid-cols-2 gap-3" style={{ marginBottom: '1rem' }}>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Fullførte oppgaver
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#16a34a' }}>
                    {projectTasks[selectedProject.id]?.filter(t => t.completed).length || 0}
                  </p>
                </div>
                <div className="card" style={{ padding: '0.75rem' }}>
                  <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                    Totale oppgaver
                  </h3>
                  <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                    {projectTasks[selectedProject.id]?.length || 0}
                  </p>
                </div>
              </div>

              {/* Add Task Button */}
              <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                  Oppgaver ({projectTasks[selectedProject.id]?.length || 0})
                </h2>
                <button
                  className="btn btn-primary"
                  style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                  onClick={() => setShowAddTask(true)}
                >
                  + Ny oppgave
                </button>
              </div>

              {/* Task List */}
              <div style={{ display: 'grid', gap: '0.75rem' }}>
                {(projectTasks[selectedProject.id] || []).map(task => (
                  <div key={task.id} className="card" style={{
                    padding: '1rem',
                    opacity: task.completed ? 0.7 : 1,
                    background: task.completed ? '#f8fafc' : 'white'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>
                      <input
                        type="checkbox"
                        checked={task.completed}
                        onChange={() => {
                          const updatedTasks = projectTasks[selectedProject.id].map(t =>
                            t.id === task.id ? { ...t, completed: !t.completed } : t
                          );
                          setProjectTasks({
                            ...projectTasks,
                            [selectedProject.id]: updatedTasks
                          });

                          // Update project progress
                          const completedCount = updatedTasks.filter(t => t.completed).length;
                          const totalCount = updatedTasks.length;
                          const newProgress = Math.round((completedCount / totalCount) * 100);

                          setProjects(projects.map(p =>
                            p.id === selectedProject.id
                              ? { ...p, completedTasks: completedCount, progress: newProgress }
                              : p
                          ));
                        }}
                        style={{
                          width: '1.2rem',
                          height: '1.2rem',
                          marginTop: '0.1rem',
                          cursor: 'pointer'
                        }}
                      />
                      <div style={{ flex: 1 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.25rem' }}>
                          <h3 style={{
                            fontSize: '1rem',
                            fontWeight: '600',
                            margin: 0,
                            textDecoration: task.completed ? 'line-through' : 'none'
                          }}>
                            {task.title}
                          </h3>
                          <span style={{
                            fontSize: '0.75rem',
                            padding: '0.125rem 0.5rem',
                            borderRadius: '0.25rem',
                            background: task.priority === 'high' ? '#fef2f2' : task.priority === 'medium' ? '#fffbeb' : '#f0fdf4',
                            color: task.priority === 'high' ? '#dc2626' : task.priority === 'medium' ? '#d97706' : '#16a34a',
                            border: `1px solid ${task.priority === 'high' ? '#fecaca' : task.priority === 'medium' ? '#fed7aa' : '#bbf7d0'}`
                          }}>
                            {task.priority === 'high' ? 'Høy' : task.priority === 'medium' ? 'Medium' : 'Lav'}
                          </span>
                        </div>
                        {task.description && (
                          <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: '0 0 0.5rem 0' }}>
                            {task.description}
                          </p>
                        )}
                        <div style={{ display: 'flex', gap: '1rem', fontSize: '0.8rem', color: '#6b7280' }}>
                          <span>📅 {task.dueDate}</span>
                          <span>👤 {task.assignedTo}</span>
                        </div>
                      </div>
                      <button
                        className="btn btn-secondary"
                        style={{
                          padding: '0.375rem 0.75rem',
                          fontSize: '0.8rem',
                          background: '#fef2f2',
                          borderColor: '#fecaca',
                          color: '#dc2626'
                        }}
                        onClick={() => {
                          if (confirm(`Er du sikker på at du vil slette oppgaven "${task.title}"?`)) {
                            const updatedTasks = projectTasks[selectedProject.id].filter(t => t.id !== task.id);
                            setProjectTasks({
                              ...projectTasks,
                              [selectedProject.id]: updatedTasks
                            });

                            // Update project progress
                            const completedCount = updatedTasks.filter(t => t.completed).length;
                            const totalCount = updatedTasks.length;
                            const newProgress = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

                            setProjects(projects.map(p =>
                              p.id === selectedProject.id
                                ? { ...p, tasks: totalCount, completedTasks: completedCount, progress: newProgress }
                                : p
                            ));
                          }
                        }}
                      >
                        🗑️ Slett
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {(projectTasks[selectedProject.id] || []).length === 0 && (
                <div className="card" style={{ padding: '2rem', textAlign: 'center', color: '#6b7280' }}>
                  <p>Ingen oppgaver ennå. Klikk på "Ny oppgave" for å legge til den første oppgaven.</p>
                </div>
              )}
              {/* Add Task Modal */}
              {showAddTask && (
                <div style={{
                  position: 'fixed',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  background: 'rgba(0, 0, 0, 0.5)',
                  zIndex: 1010,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  padding: '1rem'
                }}>
                  <div style={{
                    background: 'white',
                    borderRadius: '0.75rem',
                    padding: '1.5rem',
                    width: '100%',
                    maxWidth: '400px',
                    boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'
                  }}>
                    <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '1rem' }}>
                      Legg til oppgave til {selectedProject.title}
                    </h3>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Tittel:</label>
                      <input
                        className="form-input"
                        type="text"
                        value={newTask.title}
                        onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                        placeholder="Oppgavetittel..."
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Beskrivelse:</label>
                      <textarea
                        className="form-input"
                        value={newTask.description}
                        onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                        placeholder="Beskrivelse av oppgaven..."
                        rows={3}
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Prioritet:</label>
                      <select
                        className="form-input"
                        value={newTask.priority}
                        onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      >
                        <option value="low">Lav</option>
                        <option value="medium">Medium</option>
                        <option value="high">Høy</option>
                      </select>
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Tildelt til:</label>
                      <select
                        className="form-input"
                        value={newTask.assignedTo}
                        onChange={(e) => setNewTask({ ...newTask, assignedTo: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      >
                        <option value="">Velg person...</option>
                        {familyMembers.map(member => (
                          <option key={member.id} value={member.name}>
                            {member.name}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div style={{ marginBottom: '1rem' }}>
                      <label className="form-label">Forfallsdato:</label>
                      <input
                        className="form-input"
                        type="date"
                        value={newTask.dueDate}
                        onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
                        style={{ marginBottom: '0.5rem' }}
                      />
                    </div>

                    <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'flex-end' }}>
                      <button
                        className="btn btn-secondary"
                        onClick={() => {
                          setShowAddTask(false);
                          setNewTask({
                            title: '',
                            description: '',
                            priority: 'medium',
                            assignedTo: '',
                            dueDate: '',
                            completed: false
                          });
                        }}
                      >
                        Avbryt
                      </button>
                      <button
                        className="btn btn-primary"
                        onClick={() => {
                          if (!newTask.title.trim()) return;

                          const task = {
                            id: Date.now() + Math.random(),
                            ...newTask,
                            completed: false
                          };

                          // Add task to project
                          setProjectTasks(prev => ({
                            ...prev,
                            [selectedProject.id]: [...(prev[selectedProject.id] || []), task]
                          }));

                          // Update project task count and progress
                          const currentTasks = projectTasks[selectedProject.id] || [];
                          const newTotalTasks = currentTasks.length + 1;
                          const completedTasks = currentTasks.filter(t => t.completed).length;
                          const newProgress = Math.round((completedTasks / newTotalTasks) * 100);

                          setProjects(projects.map(p =>
                            p.id === selectedProject.id
                              ? { ...p, tasks: newTotalTasks, progress: newProgress }
                              : p
                          ));

                          // Reset form and close modal
                          setShowAddTask(false);
                          setNewTask({
                            title: '',
                            description: '',
                            priority: 'medium',
                            assignedTo: '',
                            dueDate: '',
                            completed: false
                          });
                        }}
                        disabled={!newTask.title.trim()}
                      >
                        Legg til oppgave
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'calendar' && (
            <div>
              <h1 style={{ fontSize: '2rem', fontWeight: 'bold', marginBottom: '2rem' }}>
                📅 Kalender
              </h1>

              {/* Person filter buttons */}
              <div style={{ marginBottom: '1rem' }}>
                <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                  Vis for:
                </h3>
                <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>
                  <button
                    className={`btn ${selectedPersonFilter === 'alle' ? 'btn-primary' : 'btn-secondary'}`}
                    style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                    onClick={() => setSelectedPersonFilter('alle')}
                  >
                    👨‍👩‍👧‍👦 Alle
                  </button>
                  {familyMembers.map(member => (
                    <button
                      key={member.id}
                      className={`btn ${selectedPersonFilter === member.name.toLowerCase() ? 'btn-primary' : 'btn-secondary'}`}
                      style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                      onClick={() => setSelectedPersonFilter(member.name.toLowerCase())}
                    >
                      {member.emoji} {member.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* Time range filter */}
              <div style={{ marginBottom: '1rem' }}>
                <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                  Tidsperiode:
                </h3>
                <div style={{ display: 'flex', gap: '0.5rem' }}>
                  {[
                    { id: '1dag', label: '1 dag' },
                    { id: '3dager', label: '3 dager' },
                    { id: '1uke', label: '1 uke' }
                  ].map(period => (
                    <button
                      key={period.id}
                      className={`btn ${timePeriod === period.id ? 'btn-primary' : 'btn-secondary'}`}
                      style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                      onClick={() => setTimePeriod(period.id)}
                    >
                      {period.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Weather widget */}
              <div style={{ marginBottom: '1rem', padding: '1rem', background: '#f8fafc', borderRadius: '0.5rem', border: '1px solid #e2e8f0' }}>
                <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.75rem', color: '#374151' }}>
                  ☀️ Været
                </h3>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.25rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.25rem' }}>I dag</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.25rem' }}>☀️</div>
                    <div style={{ fontSize: '0.7rem', color: '#4b5563', fontWeight: '500' }}>18°</div>
                  </div>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.25rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.25rem' }}>I morgen</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.25rem' }}>⛅</div>
                    <div style={{ fontSize: '0.7rem', color: '#4b5563', fontWeight: '500' }}>16°</div>
                  </div>
                  <div style={{ textAlign: 'center', flex: 1, padding: '0.25rem' }}>
                    <div style={{ fontSize: '0.7rem', color: '#6b7280', marginBottom: '0.25rem' }}>Overmorgen</div>
                    <div style={{ fontSize: '1.25rem', marginBottom: '0.25rem' }}>🌧️</div>
                    <div style={{ fontSize: '0.7rem', color: '#4b5563', fontWeight: '500' }}>14°</div>
                  </div>
                </div>
              </div>

              {/* Calendar widget */}
              <div className="card" style={{ padding: '1rem', marginBottom: '1rem' }}>
                <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '1rem', color: '#374151' }}>
                  📅 Kalender
                </h3>

                {/* Calendar Header */}
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  marginBottom: '1rem'
                }}>
                  <button
                    style={{
                      background: 'none',
                      border: 'none',
                      fontSize: '1.25rem',
                      cursor: 'pointer',
                      padding: '0.25rem',
                      color: '#6b7280'
                    }}
                    onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1))}
                  >
                    ‹
                  </button>
                  <h4 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                    {formatMonth(currentDate)}
                  </h4>
                  <button
                    style={{
                      background: 'none',
                      border: 'none',
                      fontSize: '1.25rem',
                      cursor: 'pointer',
                      padding: '0.25rem',
                      color: '#6b7280'
                    }}
                    onClick={() => setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1))}
                  >
                    ›
                  </button>
                </div>

                {/* Day Headers */}
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(7, 1fr)',
                  gap: '2px',
                  marginBottom: '0.5rem'
                }}>
                  {['Søn', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør'].map(day => (
                    <div key={day} style={{
                      fontWeight: '600',
                      color: '#6b7280',
                      padding: '0.5rem 0',
                      textAlign: 'center',
                      fontSize: '0.75rem'
                    }}>
                      {day}
                    </div>
                  ))}
                </div>

                {/* Calendar Days */}
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(7, 1fr)',
                  gap: '2px'
                }}>
                  {getDaysInMonth(currentDate).map((date, index) => {
                    if (!date) {
                      return <div key={index} style={{ aspectRatio: '1', minHeight: '32px' }} />;
                    }

                    const personForDate = getPersonForDate(date);
                    const today = isToday(date);
                    const hasActivities = (date.getDate() % 3) === 0;

                    return (
                      <div
                        key={index}
                        className={`calendar-day ${today ? 'today' : ''}`}
                        style={{
                          aspectRatio: '1',
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '0.75rem',
                          borderRadius: '0.25rem',
                          cursor: 'pointer',
                          position: 'relative',
                          minHeight: '32px',
                          padding: '2px',
                          background: today ? '#3b82f6' : personForDate.color,
                          color: today ? 'white' : '#374151',
                          border: `1px solid ${today ? '#2563eb' : personForDate.borderColor}`
                        }}
                        onClick={() => {
                          const dateFormatted = date.toLocaleDateString('no-NO', {
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          });
                          const custodyInfo = `Aktiviteter for ${personForDate.name} ${personForDate.emoji}`;
                          const activities = hasActivities ? [
                            { name: 'Emma - Barnehage', time: '08:00-16:00', type: 'barnehage' },
                            { name: 'Oliver - Fotballtrening', time: '17:00-18:30', type: 'sport' },
                            { name: 'Familie middag', time: '18:30-20:00', type: 'familie' }
                          ] : [];

                          setSelectedCalendarDay({
                            date: dateFormatted,
                            custodyInfo,
                            activities,
                            hasActivities,
                            person: personForDate
                          });
                        }}
                      >
                        <span style={{ fontWeight: today ? '600' : '500' }}>
                          {date.getDate()}
                        </span>
                        {hasActivities && (
                          <div style={{
                            width: '4px',
                            height: '4px',
                            borderRadius: '50%',
                            marginTop: '2px',
                            background: today ? 'rgba(255,255,255,0.8)' : personForDate.borderColor
                          }} />
                        )}
                      </div>
                    );
                  })}
                </div>

                {/* Legend */}
                <div style={{
                  marginTop: '1rem',
                  display: 'flex',
                  justifyContent: 'center',
                  gap: '0.5rem',
                  fontSize: '0.75rem',
                  flexWrap: 'wrap'
                }}>
                  {familyMembers.map(member => (
                    <div key={member.id} style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>
                      <div style={{
                        width: '12px',
                        height: '12px',
                        background: member.color,
                        borderRadius: '2px',
                        border: `1px solid ${member.borderColor}`
                      }} />
                      <span>{member.emoji} {member.name}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Selected Calendar Day Expanded Content */}
              {selectedCalendarDay && (
                <div style={{
                  background: 'white',
                  borderRadius: '0.75rem',
                  padding: '1.5rem',
                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                  border: '1px solid #e5e7eb',
                  marginBottom: '1.5rem'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '1rem' }}>
                    <div>
                      <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '0.5rem' }}>
                        📅 {selectedCalendarDay.date}
                      </h3>
                      <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>
                        👥 {selectedCalendarDay.custodyInfo}
                      </p>
                    </div>
                    <button
                      onClick={() => setSelectedCalendarDay(null)}
                      style={{
                        background: 'none',
                        border: 'none',
                        fontSize: '1.5rem',
                        cursor: 'pointer',
                        color: '#6b7280',
                        padding: '0.25rem'
                      }}
                    >
                      ×
                    </button>
                  </div>

                  {selectedCalendarDay.hasActivities ? (
                    <div>
                      <h4 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.75rem' }}>Aktiviteter:</h4>
                      <div style={{ display: 'grid', gap: '0.75rem' }}>
                        {selectedCalendarDay.activities.map((activity, index) => (
                          <div
                            key={index}
                            style={{
                              padding: '0.75rem',
                              background: '#f8fafc',
                              borderRadius: '0.5rem',
                              border: '1px solid #e2e8f0',
                              cursor: 'pointer',
                              transition: 'all 0.2s'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#f1f5f9';
                              e.currentTarget.style.borderColor = '#cbd5e1';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = '#f8fafc';
                              e.currentTarget.style.borderColor = '#e2e8f0';
                            }}
                            onClick={() => alert(`Klikket på aktivitet: ${activity.name} (${activity.time})`)}
                          >
                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              <span style={{ fontWeight: '500' }}>{activity.name}</span>
                              <span style={{ color: '#6b7280', fontSize: '0.875rem' }}>{activity.time}</span>
                            </div>
                            <div style={{ marginTop: '0.25rem' }}>
                              <span style={{
                                fontSize: '0.75rem',
                                padding: '0.25rem 0.5rem',
                                borderRadius: '0.25rem',
                                background: activity.type === 'barnehage' ? '#fef3c7' : activity.type === 'sport' ? '#dbeafe' : '#f3e8ff',
                                color: activity.type === 'barnehage' ? '#92400e' : activity.type === 'sport' ? '#1e40af' : '#6b21a8'
                              }}>
                                {activity.type === 'barnehage' ? '🏫 Barnehage' : activity.type === 'sport' ? '⚽ Sport' : '👨‍👩‍👧‍👦 Familie'}
                              </span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <div style={{ textAlign: 'center', color: '#6b7280', padding: '1rem' }}>
                      <p>Ingen spesielle aktiviteter denne dagen.</p>
                      <p style={{ fontSize: '0.875rem', marginTop: '0.5rem' }}>💡 Klikk på familiefiltrene for å se spesifikke aktiviteter!</p>
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {activeTab === 'family' && (
            <div>
              <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
                👨‍👩‍👧‍👦 Familie
              </h1>

              {/* Family Members Overview */}
              <div style={{ marginBottom: '1.5rem' }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '0.75rem' }}>
                  <h2 style={{ fontSize: '1.125rem', fontWeight: '600' }}>
                    Familiemedlemmer ({familyMembers.length})
                  </h2>
                  <button
                    className="btn btn-primary"
                    style={{ padding: '0.5rem 1rem', fontSize: '0.875rem' }}
                    onClick={() => {
                      setShowAddMember(true);
                    }}
                  >
                    + Legg til person
                  </button>
                </div>

                <div style={{ display: 'grid', gap: '0.75rem' }}>
                  {familyMembers.map(member => (
                    <div key={member.id} className="card" style={{ padding: '1rem' }}>
                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <div
                          style={{
                            display: 'flex',
                            alignItems: 'center',
                            gap: '0.75rem',
                            cursor: 'pointer',
                            flex: 1,
                            padding: '0.25rem',
                            borderRadius: '0.5rem',
                            transition: 'background-color 0.2s',
                            backgroundColor: selectedMember?.id === member.id ? '#f0f9ff' : 'transparent'
                          }}
                          onClick={() => {
                            console.log('Family member clicked:', member.name);
                            setSelectedMember(selectedMember?.id === member.id ? null : member);
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = selectedMember?.id === member.id ? '#f0f9ff' : '#f8fafc';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = selectedMember?.id === member.id ? '#f0f9ff' : 'transparent';
                          }}
                        >
                          <div style={{
                            width: '3rem',
                            height: '3rem',
                            background: member.color,
                            border: `2px solid ${member.borderColor}`,
                            borderRadius: '50%',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            fontSize: '1.5rem'
                          }}>
                            {member.emoji}
                          </div>
                          <div style={{ flex: 1 }}>
                            <h3 style={{ fontSize: '1.125rem', fontWeight: '600', margin: 0 }}>
                              {member.name}
                            </h3>
                            <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                              {member.role ? (() => {
                                const roleNames = {
                                  mor: 'Mor',
                                  far: 'Far',
                                  barn: 'Barn',
                                  venn: 'Venn'
                                };
                                return roleNames[member.role] || 'Familiemedlem';
                              })() : 'Familiemedlem'} • Klikk for å se oppgaver
                            </p>
                          </div>
                          <div style={{
                            fontSize: '1rem',
                            color: '#6b7280',
                            transition: 'transform 0.2s',
                            transform: selectedMember?.id === member.id ? 'rotate(180deg)' : 'rotate(0deg)'
                          }}>
                            ▼
                          </div>
                        </div>
                        <div style={{ display: 'flex', gap: '0.5rem' }}>
                          <button
                            className="btn btn-secondary"
                            style={{ padding: '0.375rem 0.75rem', fontSize: '0.8rem' }}
                            onClick={() => alert(`Redigerer ${member.name} (funksjon kommer snart)`)}
                          >
                            ✏️ Rediger
                          </button>
                          {familyMembers.length > 1 && (
                            <button
                              className="btn btn-secondary"
                              style={{
                                padding: '0.375rem 0.75rem',
                                fontSize: '0.8rem',
                                background: '#fef2f2',
                                borderColor: '#fecaca',
                                color: '#dc2626'
                              }}
                              onClick={() => {
                                if (confirm(`Er du sikker på at du vil fjerne ${member.name} fra familien?`)) {
                                  setFamilyMembers(familyMembers.filter(m => m.id !== member.id));
                                }
                              }}
                            >
                              🗑️ Fjern
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Selected Member Tasks */}
              {selectedMember && (
                <div style={{ marginBottom: '1.5rem' }}>
                  <h2 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.75rem' }}>
                    Oppgaver for {selectedMember.name} {selectedMember.emoji}
                  </h2>

                  {(() => {
                    const memberTasks = getTasksForMember(selectedMember.name);

                    if (memberTasks.total === 0) {
                      return (
                        <div className="card" style={{ padding: '1.5rem', textAlign: 'center' }}>
                          <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>
                            {selectedMember.name} har ingen oppgaver for øyeblikket.
                          </p>
                        </div>
                      );
                    }

                    return (
                      <div style={{ display: 'grid', gap: '1rem' }}>
                        {/* Standalone Tasks */}
                        {memberTasks.standalone.length > 0 && (
                          <div>
                            <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                              Selvstendige oppgaver ({memberTasks.standalone.length})
                            </h3>
                            <div style={{ display: 'grid', gap: '0.5rem' }}>
                              {memberTasks.standalone.map(task => (
                                <div
                                  key={task.id}
                                  className="card"
                                  style={{
                                    padding: '0.75rem',
                                    opacity: task.completed ? 0.7 : 1,
                                    borderLeft: task.completed ? '4px solid #16a34a' :
                                      task.priority === 'high' ? '4px solid #dc2626' :
                                      task.priority === 'medium' ? '4px solid #f59e0b' : '4px solid #6b7280'
                                  }}
                                >
                                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                    <div style={{ flex: 1 }}>
                                      <h4 style={{
                                        fontSize: '0.9rem',
                                        fontWeight: '600',
                                        margin: 0,
                                        textDecoration: task.completed ? 'line-through' : 'none',
                                        color: task.completed ? '#6b7280' : '#111827'
                                      }}>
                                        {task.completed ? '✅' : '📋'} {task.title}
                                      </h4>
                                      <p style={{
                                        fontSize: '0.8rem',
                                        color: '#6b7280',
                                        margin: '0.25rem 0 0 0',
                                        textDecoration: task.completed ? 'line-through' : 'none'
                                      }}>
                                        {task.description}
                                      </p>
                                      {task.dueDate && (
                                        <p style={{
                                          fontSize: '0.75rem',
                                          color: task.completed ? '#6b7280' :
                                            new Date(task.dueDate) < new Date() ? '#dc2626' : '#374151',
                                          margin: '0.25rem 0 0 0',
                                          fontWeight: new Date(task.dueDate) < new Date() && !task.completed ? '600' : '400'
                                        }}>
                                          📅 {new Date(task.dueDate).toLocaleDateString('no-NO')}
                                          {new Date(task.dueDate) < new Date() && !task.completed && ' (Forfalt)'}
                                        </p>
                                      )}
                                    </div>
                                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                                      <span style={{
                                        padding: '0.125rem 0.375rem',
                                        borderRadius: '0.25rem',
                                        fontSize: '0.7rem',
                                        fontWeight: '500',
                                        background: task.priority === 'high' ? '#fef2f2' :
                                          task.priority === 'medium' ? '#fffbeb' : '#f9fafb',
                                        color: task.priority === 'high' ? '#dc2626' :
                                          task.priority === 'medium' ? '#d97706' : '#6b7280'
                                      }}>
                                        {task.priority === 'high' ? '🔴 Høy' :
                                         task.priority === 'medium' ? '🟡 Medium' : '🟢 Lav'}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}

                        {/* Project Tasks */}
                        {memberTasks.project.length > 0 && (
                          <div>
                            <h3 style={{ fontSize: '1rem', fontWeight: '600', marginBottom: '0.5rem', color: '#374151' }}>
                              Prosjektoppgaver ({memberTasks.project.length})
                            </h3>
                            <div style={{ display: 'grid', gap: '0.5rem' }}>
                              {memberTasks.project.map(task => (
                                <div
                                  key={`project-${task.id}`}
                                  className="card"
                                  style={{
                                    padding: '0.75rem',
                                    opacity: task.completed ? 0.7 : 1,
                                    borderLeft: task.completed ? '4px solid #16a34a' :
                                      task.priority === 'high' ? '4px solid #dc2626' :
                                      task.priority === 'medium' ? '4px solid #f59e0b' : '4px solid #6b7280'
                                  }}
                                >
                                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                                    <div style={{ flex: 1 }}>
                                      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.25rem' }}>
                                        <span style={{
                                          padding: '0.125rem 0.375rem',
                                          borderRadius: '0.25rem',
                                          fontSize: '0.7rem',
                                          fontWeight: '500',
                                          background: '#f3e8ff',
                                          color: '#8b5cf6'
                                        }}>
                                          📁 {task.projectName}
                                        </span>
                                      </div>
                                      <h4 style={{
                                        fontSize: '0.9rem',
                                        fontWeight: '600',
                                        margin: 0,
                                        textDecoration: task.completed ? 'line-through' : 'none',
                                        color: task.completed ? '#6b7280' : '#111827'
                                      }}>
                                        {task.completed ? '✅' : '📋'} {task.title}
                                      </h4>
                                      <p style={{
                                        fontSize: '0.8rem',
                                        color: '#6b7280',
                                        margin: '0.25rem 0 0 0',
                                        textDecoration: task.completed ? 'line-through' : 'none'
                                      }}>
                                        {task.description}
                                      </p>
                                      {task.dueDate && (
                                        <p style={{
                                          fontSize: '0.75rem',
                                          color: task.completed ? '#6b7280' :
                                            new Date(task.dueDate) < new Date() ? '#dc2626' : '#374151',
                                          margin: '0.25rem 0 0 0',
                                          fontWeight: new Date(task.dueDate) < new Date() && !task.completed ? '600' : '400'
                                        }}>
                                          📅 {new Date(task.dueDate).toLocaleDateString('no-NO')}
                                          {new Date(task.dueDate) < new Date() && !task.completed && ' (Forfalt)'}
                                        </p>
                                      )}
                                    </div>
                                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                                      <span style={{
                                        padding: '0.125rem 0.375rem',
                                        borderRadius: '0.25rem',
                                        fontSize: '0.7rem',
                                        fontWeight: '500',
                                        background: task.priority === 'high' ? '#fef2f2' :
                                          task.priority === 'medium' ? '#fffbeb' : '#f9fafb',
                                        color: task.priority === 'high' ? '#dc2626' :
                                          task.priority === 'medium' ? '#d97706' : '#6b7280'
                                      }}>
                                        {task.priority === 'high' ? '🔴 Høy' :
                                         task.priority === 'medium' ? '🟡 Medium' : '🟢 Lav'}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })()}
                </div>
              )}

              {/* Family Statistics */}
              <div style={{ marginBottom: '1.5rem' }}>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.75rem' }}>
                  Familiestatistikk
                </h2>
                <div className="grid grid-cols-2 gap-3">
                  <div className="card" style={{ padding: '0.75rem' }}>
                    <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                      Totale oppgaver
                    </h3>
                    <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                      {familyMembers.length * 3}
                    </p>
                  </div>
                  <div className="card" style={{ padding: '0.75rem' }}>
                    <h3 style={{ fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem' }}>
                      Aktive prosjekter
                    </h3>
                    <p style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#16a34a' }}>
                      3
                    </p>
                  </div>
                </div>
              </div>

              {/* Quick Actions */}
              <div>
                <h2 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.75rem' }}>
                  Hurtighandlinger
                </h2>
                <div style={{ display: 'grid', gap: '0.5rem' }}>
                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => alert('Planlegg familieaktivitet (funksjon kommer snart)')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>🎯</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Planlegg familieaktivitet
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Opprett nye aktiviteter for hele familien
                        </p>
                      </div>
                    </div>
                  </button>

                  <button
                    className="card"
                    style={{
                      padding: '1rem',
                      border: 'none',
                      background: '#f8fafc',
                      borderRadius: '0.75rem',
                      cursor: 'pointer',
                      textAlign: 'left',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = '#f1f5f9';
                      e.currentTarget.style.transform = 'translateY(-1px)';
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.transform = 'translateY(0)';
                    }}
                    onClick={() => setActiveTab('calendar')}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                      <span style={{ fontSize: '1.5rem' }}>📅</span>
                      <div>
                        <h3 style={{ fontSize: '1rem', fontWeight: '600', margin: 0 }}>
                          Se familiekalender
                        </h3>
                        <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>
                          Oversikt over alle familieaktiviteter
                        </p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>

      {/* Floating Action Button with Menu */}
      <div className="floating-action-container" style={{
        position: 'fixed',
        bottom: '1rem',
        right: '1rem',
        zIndex: 1005
      }}>
        {/* Floating Menu Overlay */}
        {showFloatingMenu && (
          <div
            className="floating-menu-overlay"
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              zIndex: 1000,
              background: 'transparent'
            }}
            onClick={() => setShowFloatingMenu(false)}
          />
        )}

        {/* Floating Menu Items */}
        {showFloatingMenu && (
          <div className="floating-menu" style={{
            position: 'absolute',
            bottom: '5rem',
            right: 0,
            display: 'flex',
            flexDirection: 'column',
            gap: '0.75rem',
            zIndex: 1001,
            minWidth: '12rem'
          }}>
            <button
              className="btn btn-primary"
              style={{
                padding: '0.75rem 1rem',
                borderRadius: '0.5rem',
                fontSize: '0.875rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'flex-start',
                gap: '0.5rem',
                boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
                whiteSpace: 'nowrap'
              }}
              onClick={() => {
                setActiveTab('family');
                setShowAddMember(true);
                setShowFloatingMenu(false);
              }}
            >
              👤 Legg til person
            </button>
            <button
              className="btn btn-primary"
              style={{
                padding: '0.75rem 1rem',
                borderRadius: '0.5rem',
                fontSize: '0.875rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'flex-start',
                gap: '0.5rem',
                boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
                whiteSpace: 'nowrap'
              }}
              onClick={() => {
                setActiveTab('tasks');
                setShowAddStandaloneTask(true);
                setShowFloatingMenu(false);
              }}
            >
              📝 Legg til oppgave
            </button>
            <button
              className="btn btn-primary"
              style={{
                padding: '0.75rem 1rem',
                borderRadius: '0.5rem',
                fontSize: '0.875rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'flex-start',
                gap: '0.5rem',
                boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
                whiteSpace: 'nowrap'
              }}
              onClick={() => {
                setActiveTab('projects');
                setShowAddProject(true);
                setShowFloatingMenu(false);
              }}
            >
              📁 Legg til prosjekt
            </button>
          </div>
        )}

        {/* Add Family Member Modal - Positioned at component level for proper z-index */}
        {showAddMember && (
          <div
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: 'rgba(0, 0, 0, 0.5)',
              zIndex: 9999,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              padding: '1rem'
            }}
            onClick={(e) => {
              if (e.target === e.currentTarget) {
                setShowAddMember(false);
                setNewMemberName('');
                setNewMemberRole('');
              }
            }}
          >
            <div style={{
              background: 'white',
              borderRadius: '0.75rem',
              padding: '1.5rem',
              width: '100%',
              maxWidth: '400px',
              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',
              position: 'relative'
            }}>
              <h3 style={{ fontSize: '1.25rem', fontWeight: '600', marginBottom: '1rem' }}>
                Legg til familiemedlem
              </h3>
              <div style={{ marginBottom: '1rem' }}>
                <label className="form-label">Navn:</label>
                <input
                  className="form-input"
                  type="text"
                  value={newMemberName}
                  onChange={(e) => setNewMemberName(e.target.value)}
                  placeholder="Skriv navn..."
                  style={{ marginBottom: '0.5rem' }}
                  onKeyPress={(e) => e.key === 'Enter' && newMemberRole.trim() && addFamilyMember()}
                  autoFocus
                />
              </div>
              <div style={{ marginBottom: '1rem' }}>
                <label className="form-label">Rolle:</label>
                <select
                  className="form-input"
                  value={newMemberRole}
                  onChange={(e) => setNewMemberRole(e.target.value)}
                  style={{ marginBottom: '0.5rem' }}
                >
                  <option value="">Velg rolle...</option>
                  <option value="mor">👩 Mor</option>
                  <option value="far">👨 Far</option>
                  <option value="barn">👧 Barn</option>
                  <option value="venn">👥 Venn</option>
                </select>
              </div>
              <div style={{ display: 'flex', gap: '0.5rem', justifyContent: 'flex-end' }}>
                <button
                  className="btn btn-secondary"
                  onClick={() => {
                    setShowAddMember(false);
                    setNewMemberName('');
                    setNewMemberRole('');
                  }}
                >
                  Avbryt
                </button>
                <button
                  className="btn btn-primary"
                  onClick={addFamilyMember}
                  disabled={!newMemberName.trim() || !newMemberRole.trim()}
                >
                  Legg til
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Main Floating Button */}
        <button
          className="btn btn-primary floating-button"
          style={{
            width: '4rem',
            height: '4rem',
            borderRadius: '50%',
            fontSize: '1.5rem',
            boxShadow: '0 8px 24px rgba(59, 130, 246, 0.3)',
            transition: 'transform 0.2s ease, box-shadow 0.2s ease',
            transform: showFloatingMenu ? 'rotate(45deg)' : 'rotate(0deg)',
            position: 'fixed',
            bottom: '1rem',
            right: '1rem'
          }}
          onClick={() => setShowFloatingMenu(!showFloatingMenu)}
        >
          +
        </button>
      </div>
    </div>
  );
}